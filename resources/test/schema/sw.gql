scalar ID
scalar String
scalar Boolean
scalar Integer
scalar Int
scalar Float

schema {
    query: Query
}

type __Schema {
    types: [__Type!]!
    queryType: __Type!
    mutationType: __Type
    directives: [__Directive!]!
}

type __Type {
    kind: __TypeKind!
    name: String
    description: String

    # OBJECT and INTERFACE only
    fields(includeDeprecated: Boolean = false): [__Field!]

    # OBJECT only
    interfaces: [__Type!]

    # INTERFACE and UNION only
    possibleTypes: [__Type!]

    # ENUM only
    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

    # INPUT_OBJECT only
    inputFields: [__InputValue!]

    # NON_NULL and LIST only
    ofType: __Type
}

type __Field {
    name: String!
    description: String
    args: [__InputValue!]!
    type: __Type!
    isDeprecated: Boolean!
    deprecationReason: String
}

type __InputValue {
    name: String!
    description: String
    type: __Type!
    defaultValue: String
}

type __EnumValue {
    name: String!
    description: String
    isDeprecated: Boolean!
    deprecationReason: String
}

enum __TypeKind {
    SCALAR
    OBJECT
    INTERFACE
    UNION
    ENUM
    INPUT_OBJECT
    LIST
    NON_NULL
}

type __Directive {
    name: String!
    description: String
    locations: [__DirectiveLocation!]!
    args: [__InputValue!]!
}

enum __DirectiveLocation {
    QUERY
    MUTATION
    FIELD
    FRAGMENT_DEFINITION
    FRAGMENT_SPREAD
    INLINE_FRAGMENT
}

type Query {
    __schema: __Schema!
    __type(name: String!): __Type
    allPeople: PeopleConnection
    allPlanets: PlanetsConnection
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

type PeopleConnection {
    pageInfo: PageInfo!
    edges: [PeopleEdge]
    totalCount: Integer
    people: [Person]
}

type PeopleEdge {
    node: Person
    cursor: String!
}

type Person {
    id: ID!
    name: String
    birthYear: String
    eyeColor: String
    gender: String
    hairColor: String
    height: Int
    mass: Float
    skinColor: String
    homeworld: Planet
    filmConnection: PersonFilmsConnection
    species: Species
    starshipConnection: PersonStarshipsConnection
    vehicleConnection: PersonVehiclesConnection
    created: String
    edited: String
}

type PersonFilmsConnection {
    id: ID!
}

type PersonStarshipsConnection {
    id: ID!
}

type PersonVehiclesConnection {
    id: ID!
}

type Species {
    id: ID!
}

type PlanetResidentsConnection {
    id: ID!
}

type PlanetFilmsConnection {
    id: ID!
}

type PlanetsConnection {
    pageInfo: PageInfo!
    edges: [PlanetsEdge]
    totalCount: Integer
    planets: [Planet]
}

type PlanetsEdge {
    node: Planet
    cursor: String!
}

type Planet {
    name: String
    diameter: Int
    rotationPeriod: Int
    orbitalPeriod: Int
    gravity: String
    population: Float
    climates: [String]
    terrains: [String]
    surfaceWater: Float
    residentConnection: PlanetResidentsConnection
    filmConnection: PlanetFilmsConnection
    created: String
    edited: String
    id: ID!
}
