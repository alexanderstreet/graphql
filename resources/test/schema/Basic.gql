enum TestEnum {
    A
    B
    C
}

type Query {
    isListTrue: [Boolean]
    isListFalse: Boolean
    isNotListTrue: [Boolean]
    isNotListFalse: Boolean

    string(value:String): String
    int(value:String): Int
    boolean(value:String): Boolean
    float(value:String): Float
    nonNull(value:String): String!

    testEnum(value:TestEnum): [TestEnum]

    first(fetched:[String!]!): String!
    last(fetched:[String!]!): String!
    all(fetched:[String!]!): [String!]!
}

extend type Query {
    __schema: __Schema!
    __type(name: String!): __Type
}
