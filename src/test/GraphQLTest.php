<?php

namespace GraphQL;

use PHPUnit\Framework\TestCase;

class GraphQLTest extends TestCase
{
    /**
     * @var Schema
     */
    private $schema;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $people = [
            'terrence' => (object) [
                'name' => 'terrence',
                'mother' => 'gwen',
            ],
            'nick' => (object) [
                'name' => 'nick',
                'mother' => 'gwen',
                'father' => 'rob',
            ],
            'rob' => (object) [
                'name' => 'rob',
                'mother' => 'carol',
            ],
            'jessica' => (object) [
                'name' => 'jessica',
                'father' => 'mark',
                'mother' => 'sandra',
            ],
            'tom' => (object) [
                'name' => 'tom',
                'father' => 'carlton',
                'mother' => 'eileen',
            ],
            'gail' => (object) [
                'name' => 'gail',
                'father' => 'murial',
                'mother' => 'gilbert',
            ],
            'gwen' => (object) [
                'name' => 'gwen',
                'father' => 'tom',
                'mother' => 'gail',
            ],
            'courtney' => (object) [
                'name' => 'courtney',
                'father' => 'tom',
                'mother' => 'gail',
            ],
            'wade' => (object) [
                'name' => 'wade',
                'father' => 'tom',
                'mother' => 'gail',
            ],
        ];

        $graph = [];

        $schema = new Schema('Schema');
        $schema->putType(new ScalarType('String'));
        $schema->putType(new ObjectType('Query'));
        $schema->putType(new ObjectType('Person'));

        $query = $schema->getType('Query');
        $string = $schema->getType('String');
        $person = $schema->getType('Person');

        $schema->addField(new Field($schema, 'query', $query));
        $query->addField(new Field($query, 'greeting', $string));
        $query->addField(new Field($query, 'person', $person));
        $person->addField(new Field($person, 'name', $string));
        $person->addField(new Field($person, 'father', new NonNullType($person)));
        $person->addField(new Field($person, 'mother', new NonNullType($person)));
        $person->addField(new Field($person, 'children', new ListType($person)));

        $query->field('greeting')->setResolver(new CallbackResolver(function (Node $node) {
            return sprintf("Hello, %s!", $node->arg('name', 'World'));
        }));

        $schema->field('query')->setFetcher(new CallbackFetcher(function (Node $node) {
            return [true];
        }));

        $query->field('person')->setFetcher(new CallbackFetcher(function (Node $node) use ($people, &$graph) {
            $name = $node->arg('name');
            $fetched = array_key_exists($name, $people) ? $people[$name] : null;
            $graph[$name] = $fetched;
            return [$fetched];
        }));

        $person->field('children')->setFetcher(new CallbackFetcher(function (Node $node) use ($people, &$graph) {
            $fetched = array_filter(array_merge([], ...array_map(function ($person) use ($people) {
                return array_values(array_filter($people, function ($child) use ($person) {
                    return array_key_exists('father', $child) && $child->father === $person->name ||
                        array_key_exists('mother', $child) && $child->mother === $person->name;
                }));
            }, $node->parent()->items())));

            foreach ($fetched as $person) {
                $graph[$person->name] = $person;
            }

            return $fetched;
        }));

        $person->field('father')->setFetcher(new CallbackFetcher(function (Node $node) use ($people, &$graph) {
            $fetched = array_values(array_filter(array_map(function ($person) use ($people) {
                return array_key_exists($person->father, $people) ? $people[$person->father] : null;
            }, $node->parent()->items())));

            foreach ($fetched as $person) {
                $graph[$person->name] = $person;
            }

            return $fetched;
        }));

        $person->field('mother')->setFetcher(new CallbackFetcher(function (Node $node) use ($people, &$graph) {
            $fetched = array_values(array_filter(array_map(function ($person) use ($people) {
                return array_key_exists($person->mother, $people) ? $people[$person->mother] : null;
            }, $node->parent()->items())));

            foreach ($fetched as $person) {
                $graph[$person->name] = $person;
            }

            return $fetched;
        }));


        $schema->field('query')->setResolver(new CallbackResolver(function (Node $node, $parent, $value) {
            return $value;
        }));

        $query->field('person')->setResolver(new CallbackResolver(function (Node $node, $parent, $value) {
            return $node->items()[0];
        }));

        $person->field('children')->setResolver(new CallbackResolver(function (Node $node, $person) use (&$graph) {
            return array_values(array_filter($graph, function ($child) use ($person) {
                return array_key_exists('father', $child) && $child->father === $person->name ||
                    array_key_exists('mother', $child) && $child->mother === $person->name;
            }));
        }));

        $person->field('father')->setResolver(new CallbackResolver(function (Node $node, $parent, $value) use (&$graph) {
            return $graph[$parent->father];
        }));

        $person->field('mother')->setResolver(new CallbackResolver(function (Node $node, $parent, $value) use (&$graph) {
            return $graph[$parent->mother];
        }));

        $this->schema = $schema;
    }

    public function queryXML(string $xml)
    {
        $queryBuilder = new XMLQueryReader();
        $query = $queryBuilder->read($xml);
        $executor = new BFSExecutor();
        return $executor->execute($this->schema, $query);
    }

    public function testQuery()
    {
        $xml = <<< _XML
<query xmlns:gql="graphql">
    <greeting name="Terrence"/>
    <person gql:alias="gwen" name="gwen">
        <name/>
    </person>
    <person gql:alias="terrence" name="terrence">
        <name/>
        <mother gql:alias="mom">
            <name/>
            <children>
                <name/>
            </children>
        </mother>
    </person>
</query>
_XML;
        $actual = $this->queryXML($xml);
        $expect = (object) [
            'greeting' => 'Hello, Terrence!',
            'gwen' => (object) [
                'name' => 'gwen',
            ],
            'terrence' => (object) [
                'name' => 'terrence',
                'mom' => (object) [
                    'name' => 'gwen',
                    'children' => [
                        (object) [
                            'name' => 'terrence',
                        ],
                        (object) [
                            'name' => 'nick',
                        ],
                    ]
                ],
            ],
        ];

        $this->assertEquals(json_encode($expect), json_encode($actual));
    }
}
