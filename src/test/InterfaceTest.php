<?php

namespace GraphQL;

use PHPUnit\Framework\TestCase;

class InterfaceTest extends TestCase
{
    /**
     * @var Schema
     */
    private $schema;

    public function setupSchema(Schema $schema, &$graph, $people, $dogs, $cats)
    {
        $schema->addField(new Field($schema, 'query', $schema->getType('Query')));

        $schema->field('query')->setFetcher(new CallbackFetcher(function (Node $node) {
            return [true];
        }));

        $schema->field('query')->setResolver(new CallbackResolver(function (Node $node, $parent, $value) {
            return $value;
        }));
    }

    public function setupQuery(Schema $schema, &$graph, $people, $dogs, $cats)
    {
        $query = $schema->getType('Query');
        $query->addField(new Field($query, 'person', $schema->getType('Person')));

        $query->field('person')->setFetcher(new CallbackFetcher(function (Node $node) use (&$graph, $people) {
            $name = $node->arg('name');
            $fetched = array_key_exists($name, $people) ? $people[$name] : null;
            $graph[$name] = $fetched;
            return [$fetched];
        }));

        $query->field('person')->setResolver(new CallbackResolver(function (Node $node, $parent, $value) {
            return $node->items()[0];
        }));
    }

    public function setupPerson(Schema $schema, &$graph, &$people, &$dogs, &$cats)
    {
        $person = $schema->getType('Person');
        $person->addField(new Field($person, 'name', $schema->getType('String')));
        $person->addField(new Field($person, 'pets', new ListType($schema->getType('Animal'))));

        $person->field('pets')->setFetcher(new CallbackFetcher(function (Node $node) use ($people, &$graph, $cats, $dogs) {
            $fetched = array_merge(array_values(...array_map(function ($person) use ($cats, $dogs) {
                return array_merge(
                    array_filter($cats, function ($cat) use ($person) {
                        return $cat->owner === $person->name;
                    }),
                    array_filter($dogs, function ($dog) use ($person) {
                        return $dog->owner === $person->name;
                    })
                );
            }, $node->parent()->items())));

            foreach ($fetched as $animal) {
                $graph[$animal->name] = $animal;
            }

            return $fetched;
        }));

        $person->field('pets')->setResolver(new CallbackResolver(function (Node $node, $parent, $value) use (&$graph) {
            return array_values(array_filter($graph, function ($animal) use ($parent) {
                return $animal->owner === $parent->name;
            }));
        }));
    }

    public function setupAnimal(Schema $schema, &$graph, &$people, &$dogs, &$cats)
    {
        $animal = $schema->getType('Animal');
        $animal->addField(new Field($animal, 'name', $schema->getType('String')));

        $animal->typer = new CallbackTyper(function (Node $node, $parent, $value) {
            return $node->schema()->getType($value->type);
        });
    }

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $people = [
            'terrence' => (object) [
                'name' => 'terrence',
            ],
            'martin' => (object) [
                'name' => 'martin',
            ],
        ];

        $dogs = [
            'gunner' => (object) [
                'type' => 'Dog',
                'name' => 'gunner',
                'owner' => 'terrence',
            ],
        ];

        $cats = [
            'tubs' => (object) [
                'type' => 'Cat',
                'name' => 'tubs',
                'owner' => 'martin',
            ],
        ];

        $graph = [];

        $schema = new Schema('Schema');

        $string = new ScalarType('String');
        $query = new ObjectType('Query');
        $person = new ObjectType('Person');
        $animal = new InterfaceType('Animal');
        $dog = new ObjectType('Dog');
        $cat = new ObjectType('Cat');

        $schema->putType($query);
        $schema->putType($string);
        $schema->putType($person);
        $schema->putType($animal);
        $schema->putType($dog);
        $schema->putType($cat);

        $this->setupSchema($schema, $graph, $people, $dogs, $cats);
        $this->setupQuery($schema, $graph, $people, $dogs, $cats);
        $this->setupPerson($schema, $graph, $people, $dogs, $cats);
        $this->setupAnimal($schema, $graph, $people, $dogs, $cats);

        $this->schema = $schema;
    }

    public function queryXML(string $xml)
    {
        $queryBuilder = new XMLQueryReader();
        $query = $queryBuilder->read($xml);
        $executor = new BFSExecutor();
        return $executor->execute($this->schema, $query);
    }

    public function testQuery()
    {
        $xml = <<< _XML
<query xmlns:gql="graphql">
    <person gql:alias="terrence" name="terrence">
        <name/>
        <pets>
            <name/>
        </pets>
    </person>
    <person gql:alias="martin" name="martin">
        <name/>
        <pets>
            <name/>
        </pets>
    </person>
</query>
_XML;
        $actual = $this->queryXML($xml);
        $expect = (object) [
            'terrence' => (object) [
                'name' => 'terrence',
                'pets' => [
                    (object) ['name' => 'gunner']
                ],
            ],
            'martin' => (object) [
                'name' => 'martin',
                'pets' => [
                    (object) ['name' => 'tubs']
                ],
            ],
        ];

        $this->assertEquals(json_encode($expect), json_encode($actual));
    }
}
